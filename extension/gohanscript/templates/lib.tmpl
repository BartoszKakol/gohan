package {{ export_package }}

// AUTO GENERATED CODE DO NOT MODIFY MANUALLY

import (
    "github.com/cloudwan/gohan/extension/gohanscript"
    "{{full_package}}"
{% for import in imports %}
    "{{ import }}"
{% endfor %}
)

{% macro result(decl) %}
{% for param in decl.Type.Results.List %}
    {% if param.Type.Name == "error" %}err{% else %}result{{ forloop.Counter }}{% endif %}{% if !forloop.Last %},{% endif %}{% endfor %}{% endmacro %}

{% macro call(package, decl) %}
    {{package}}.{{ decl.Name.Name }}({{ params(decl) }})
{% endmacro %}

{% macro quoted_params(decl) %}
{% for param in decl.Type.Params.List %}{% for name in param.Names %}"{{ name.Name | to_under_score_case }}",{% endfor %}{% endfor %}{% endmacro %}

{% macro params(decl) %}
{% for param in decl.Type.Params.List %}{% for name in param.Names %}{{ name.Name }},{% endfor %}{% endfor %}{% endmacro %}

{% macro gohanscript_cast_params(decl) %}
{% for param in decl.Type.Params.List %}{% for name in param.Names %}
var {{ name.Name }} {{ param.Type | astType }}
i{{ name.Name }} := stmt.Arg("{{ name.Name | to_under_score_case }}", context)
if i{{ name.Name }} != nil {
    {{ name.Name }} = i{{ name.Name }}.({{ param.Type | astType }})
}{% endfor %}
{% endfor %}
{% endmacro %}

{% macro gohanscript(package, decl) %}
gohanscript.RegisterStmtParser("{{ decl.Name.Name | to_under_score_case }}",
    func (stmt *gohanscript.Stmt) (func(*gohanscript.Context) (interface{}, error), error) {
       return func(context *gohanscript.Context) (interface{}, error) {
           {{ gohanscript_cast_params(decl) }}
           {% if decl.Type.Results.List | length == 0 %}
               {{ call(package, decl) }}
               return nil, nil
           {% else %}
               {{ result(decl) }} := {{ call(package, decl) }}
               {% if decl.Type.Results.List | length == 1 %}
                   {% if decl.Type.Results.List.0.Type.Name == "error" %}
                       return nil , err
                   {% else %}
                       return result1 , nil
                   {% endif %}
               {% elif decl.Type.Results.List | length == 2 &&  decl.Type.Results.List.1.Type.Name == "error" %}
                   return result1, err
               {% else %}
                   return []interface{}{ {{ result(decl) }} }, nil
               {% endif %}
          {% endif %}
          }, nil})
{% endmacro %}


{% macro minigo_params(decl) %}
{%        if decl.Type.Params.List | length > index %}
{% set i = 0 %}
{%         for param in decl.Type.Params.List %}
{%             for name in param.Names %}
                    {{ name.Name }}, _ := args[{{ i }}].({{ param.Type | astType }}){% set i = i + 1 %}
{%             endfor %}
{%        endfor %}
{%     endif %}
{% endmacro %}

{% macro minigo(package, decl) %}
    gohanscript.RegisterMiniGoFunc("{{ decl.Name.Name }}",
        func (vm *gohanscript.VM, args []interface{}) []interface{} {
            {{ minigo_params(decl) }}
            {% if decl.Type.Results.List | length == 0 %}
                {{ call(package, decl) }}
                return nil
            {% else %}
                 {{ result(decl) }} := {{ call(package, decl) }}
                return []interface{}{ {{ result(decl) }} }
            {% endif %}
    })
{% endmacro %}

{% macro func_body(package, decl) %}
{{ gohanscript(package, decl) }}
{{ minigo(package, decl) }}
{% endmacro %}

func init(){
{% for decl in funcs %}
{% if decl.Body != nil %} {{ func_body(package, decl) }} {% endif %}
{% endfor %}
}