test_suite:
  tests:
  - name: You can loop using with_items.
    test:
    - vars:
        result: ""
    - blocks:
        - vars:
            result: "{{result}}{{item}}"
      with_items:
      - apple
      - orange
      - banana
    - assert: expect=appleorangebanana actual="{{result}}"
  - name: You can set value using vars.
    test:
    - vars:
        obj:
          name: alice
          hobby: eating
    - blocks:
        - vars:
            obj.hobby: running
    - assert: expect="alice" actual="{{obj.name}}"
    - assert: expect="running" actual="{{obj.hobby}}"
  - name: You can loop over dict using with_dict.
    test:
    - vars:
        result: ""
    - blocks:
        - vars:
            result: "{{result}}{{item}}"
      with_items:
      - apple
      - orange
      - banana
    - assert: expect=appleorangebanana actual="{{result}}"
  - name: You can refer items on with_items.
    test:
    - vars:
        result: ""
        foods:
        - apple
        - orange
        - banana
    - blocks:
        - vars:
            result: "{{result}}{{item}}"
      with_items: $foods
    - assert: expect=appleorangebanana actual="{{result}}"
  - name: You can refer items on with_items with pararell execution mode
    test:
    - vars:
        foods:
        - apple
        - orange
        - banana
    - blocks:
        - vars:
            result: "{{item}}"
      with_items: $foods
      worker: 3
  - name: You can use conditional using when.
    test:
    - vars:
        called1: True
      when: 1 == 1
    - vars:
        called2: True
      when: 1 == 0
      else:
        - vars:
            called3: True
    - assert: expect=True actual="{{ called1 }}"
    - assert: expect="" actual="{{ called2 }}"
    - assert: expect=True actual="{{ called3 }}"
  - name: You can use exception and handle it.
    test:
    - blocks:
      - fail: msg="handled_error"
        rescue: []
      - fail: msg="handled_error"
        rescue:
        - debug: "test"
      - fail: msg="failed"
      - vars:
         should_not_called: True
      rescue:
      - vars:
          rescue_called_with: "{{error}}"
      always:
      - vars:
          always_called: True
    - assert: expect=failed actual="{{ rescue_called_with }}"
    - assert: expect=True actual="{{ always_called }}"
    - assert: expect="" actual="{{ should_not_called }}"
  - name: You can retry execution
    test:
    - blocks:
      - vars:
          called: "{{called}}called"
      - fail: msg="failed"
      retries: 2
      delay: 1
      rescue: []
    - assert: expect=calledcalled actual="{{ called }}"
  - name: You can sleep execution
    test:
    - sleep: 5000
